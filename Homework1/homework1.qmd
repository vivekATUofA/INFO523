---
title: "Homework 1 - INFO 523"
author: "Vivek Aswal"
format: html
jupyter: python3
editor: visual
---

# Part 1: Python Basics

## Task 1: Variables and Types

```{python}
# Task 1: Define variables and print types
age = 25
course = "Data Mining"

print("Age:", age)
print("Course:", course)
print("Type of age:", type(age))
print("Type of course:", type(course))
```

## Task 2: Control Structures - Prime Checker

```{python}
# Task 2: Check for prime numbers
def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5)+1):
        if num % i == 0:
            return False
    return True

# Test
for n in [2, 3, 4, 17, 20]:
    print(f"{n} is prime? {is_prime(n)}")
```

## Task 3: Data Structures - Dictionary

```{python}
# Task 3: Dictionary of student grades
student_grades = {
    "Alice": "A",
    "Bob": "B",
    "Charlie": "C",
    "David": "B",
    "Eva": "A"
}

for name, grade in student_grades.items():
    print(f"Student {name} has grade {grade}")
```

## Task 4: List Comprehension & Statistics Function

```{python}
# Task 4: List comprehension + stats function
import statistics

squares = [(x, x**2) for x in range(1, 11)]
print("Squares:", squares)

def calculate_stats(numbers):
    mean_val = statistics.mean(numbers)
    median_val = statistics.median(numbers)
    std_dev = statistics.stdev(numbers)
    return mean_val, median_val, std_dev

numbers = [1, 3, 5, 7, 9, 11, 13, 15]
mean_val, median_val, std_dev = calculate_stats(numbers)
print(f"Mean: {mean_val}, Median: {median_val}, Std Dev: {std_dev:.2f}")
```

# Part 2: NumPy Introduction

## Task 1: NumPy Array and Determinant

```{python}
import numpy as np

A = np.arange(100).reshape(10, 10)
print("Matrix A:")
print(A)

det = np.linalg.det(A)
print(f"Determinant of A: {det:.2f}")
```

## Task 2: Normalize a 1D Array

```{python}
arr = np.random.randint(1, 100, size=10)
print("Original array:", arr)

norm_arr = (arr - arr.min()) / (arr.max() - arr.min())
print("Normalized array:", norm_arr)
```

## Task 3: Column Extraction and Square Roots

```{python}
import math

array2d = np.random.randint(10, 100, size=(5, 5))
print("2D Array:")
print(array2d)

third_col = array2d[:, 2]
print("Third column:", third_col)

print("Square roots of third column:")
for val in third_col:
    print(f"âˆš{val} = {math.sqrt(val):.2f}")
```

## Task 4: NumPy Statistics

```{python}
array_stats = np.random.randint(1, 100, size=(4, 6))
print("Array for stats:")
print(array_stats)

row_mean = array_stats.mean(axis=1)
row_median = np.median(array_stats, axis=1)
row_var = array_stats.var(axis=1)

col_mean = array_stats.mean(axis=0)
col_median = np.median(array_stats, axis=0)
col_var = array_stats.var(axis=0)

print("Row means:", row_mean)
print("Row variances:", row_var)
max_var_row = np.argmax(row_var)
print(f"Row with max variance (index {max_var_row}):", array_stats[max_var_row])
```

# Part 3: Pandas Introduction

## Task 1: Series and DataFrame

```{python}
import pandas as pd
import string
import random

labels = list(string.ascii_lowercase[:10])
values = [random.randint(1, 100) for _ in range(10)]

series = pd.Series(values, index=labels)
df_series = series.to_frame(name='Random_Numbers')

print("Series:")
print(series)
print("DataFrame:")
print(df_series)
```

## Task 2: Data Importing and Inspection

```{python}
from io import StringIO

csv_data = """id,name,score
1,Alice,85
2,Bob,90
3,Charlie,78
4,David,
5,Eva,92
6,Frank,88
7,Grace,85
8,Helen,95
9,Ian,80
10,Jane,85
"""

df = pd.read_csv(StringIO(csv_data))

print("Data types:")
print(df.dtypes)
print("First 10 rows:")
print(df.head(10))
```

## Task 3: Data Cleaning and Normalization

```{python}
median_score = df['score'].median()
df['score'].fillna(median_score, inplace=True)

# Normalize
mean = df['score'].mean()
std = df['score'].std()
df['score_normalized'] = (df['score'] - mean) / std

print("Cleaned and normalized DataFrame:")
print(df)
```

## Task 4: Aggregation and Grouping

```{python}
grouped_df = df.groupby('name')['score'].mean().reset_index()
grouped_df.rename(columns={'score': 'average_score'}, inplace=True)

sorted_df = grouped_df.sort_values(by='average_score', ascending=False)

print("Grouped and sorted average scores:")
print(sorted_df)
```

# Summary Report

- Missing scores were filled using the median to avoid skewing the mean.
- Normalization helped scale features with mean 0 and std 1, useful for modeling.
- Prime check and statistics were implemented using control flow and Python libraries.
- NumPy and Pandas allowed matrix, column-wise, and group-level computations efficiently.
